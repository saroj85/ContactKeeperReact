{"ast":null,"code":"import _slicedToArray from \"D:\\\\work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\work\\\\client\\\\src\\\\context\\\\product\\\\productState.js\";\nimport React, { useReducer } from 'react';\nimport axois from 'axios';\nimport ProductContext from './productContext';\nimport ProductReducer from './productReducer';\nimport { GET_ALL_PRODUCT, GET_PRODUCT_BY_ID, DELETE_PRODUCT, PRODUCT_ERROR, EDIT_PRODUCT } from '../type';\n\nconst ProductState = props => {\n  const initialState = {\n    products: [],\n    current: null,\n    filterd: null,\n    error: null\n  };\n\n  const _useReducer = useReducer(ProductReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // GET CONTACTS \n\n\n  const getProduct = async () => {\n    try {\n      const res = await axois.get(\"/api/product\");\n      dispatch({\n        type: GET_ALL_PRODUCT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: PRODUCT_ERROR,\n        payload: err.response\n      });\n    }\n  }; // // ADD CONTACTS\n  // const addContact = async contact => {\n  //     const config = { headers: { 'Content-Type': 'application/json' } }\n  //     try {\n  //         const res = await axois.post(\"/api/contacts\", contact, config)\n  //         dispatch({ type: ADD_CONTACT, payload: res.data })\n  //     } catch (err) {\n  //         dispatch({\n  //             type: CONTACTS_ERROR,\n  //             payload: err.response.msg\n  //         })\n  //     }\n  // }\n  // // UPDATE CONTACT \n  // const updateContact = async  contact => {\n  //     const config = { headers: { 'Content-Type': 'application/json' } }\n  //     try {\n  //         const res = await axois.put(`/api/contacts/${contact._id}`, contact, config)\n  //         dispatch({ type: UPDATE_CONTACT, payload: res.data })\n  //     } catch (err) {\n  //         dispatch({\n  //             type: CONTACTS_ERROR,\n  //             payload: err.response.msg\n  //         })\n  //     }\n  // }\n  // // DELETE_CONTACT\n  // const deleteContact = async id => {\n  //     try {\n  //         await axois.delete(`/api/contacts/${id}`)\n  //         dispatch({ type: DELETE_CONTACT, payload: id })\n  //     } catch (err) {\n  //         dispatch({\n  //             type: CONTACTS_ERROR,\n  //             payload: err.response.msg\n  //         })\n  //     }\n  // }\n  // // SET CURRENT CONTACT \n  // const setCurrent = contact => {\n  //     dispatch({ type: SET_CURRENT, payload: contact })\n  // }\n  // // CLEAR CURRENT CONTACT \n  // const clearCurrent = () => {\n  //     dispatch({ type: CLEAR_CURRENT })\n  // }\n  // // FILTER CONTACT \n  // const filterContact = text => {\n  //     dispatch({ type: FILTER_CONTACTS, payload: text })\n  // }\n  // // CLEAR FILTER \n  // const clearFilter = () => {\n  //     dispatch({ type: CLEAR_FILTER })\n  // }\n\n\n  return React.createElement(ProductContext.Provider, {\n    value: {\n      products: state.products,\n      getProduct\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ProductState;","map":{"version":3,"sources":["D:/work/client/src/context/product/productState.js"],"names":["React","useReducer","axois","ProductContext","ProductReducer","GET_ALL_PRODUCT","GET_PRODUCT_BY_ID","DELETE_PRODUCT","PRODUCT_ERROR","EDIT_PRODUCT","ProductState","props","initialState","products","current","filterd","error","state","dispatch","getProduct","res","get","type","payload","data","err","response","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,cAHJ,EAIIC,aAJJ,EAKIC,YALJ,QAMO,SANP;;AAQA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAMC,YAAY,GAAG;AACjBC,IAAAA,QAAQ,EAAE,EADO;AAEjBC,IAAAA,OAAO,EAAE,IAFQ;AAGjBC,IAAAA,OAAO,EAAE,IAHQ;AAIjBC,IAAAA,KAAK,EAAE;AAJU,GAArB;;AAD4B,sBAQFf,UAAU,CAACG,cAAD,EAAiBQ,YAAjB,CARR;AAAA;AAAA,QAQrBK,KARqB;AAAA,QAQdC,QARc,oBAY5B;;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC3B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAU,cAAV,CAAlB;AACAH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAACjB,eAAP;AAAwBkB,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAArC,OAAD,CAAR;AACH,KAHD,CAGE,OAAOC,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAEd,aADD;AAELe,QAAAA,OAAO,EAAEE,GAAG,CAACC;AAFR,OAAD,CAAR;AAIH;AACJ,GAVD,CAd4B,CA8B5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAIA,SACI,oBAAC,cAAD,CAAgB,QAAhB;AACI,IAAA,KAAK,EAAE;AACHb,MAAAA,QAAQ,EAAEI,KAAK,CAACJ,QADb;AAEHM,MAAAA;AAFG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKR,KAAK,CAACgB,QALX,CADJ;AASH,CAhHD;;AAmHA,eAAejB,YAAf","sourcesContent":["import React, { useReducer } from 'react';\r\nimport axois from 'axios';\r\nimport ProductContext from './productContext';\r\nimport ProductReducer from './productReducer';\r\nimport {\r\n    GET_ALL_PRODUCT,\r\n    GET_PRODUCT_BY_ID,\r\n    DELETE_PRODUCT,\r\n    PRODUCT_ERROR,\r\n    EDIT_PRODUCT\r\n} from '../type';\r\n\r\nconst ProductState = (props) => {\r\n    const initialState = {\r\n        products: [],\r\n        current: null,\r\n        filterd: null,\r\n        error: null\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(ProductReducer, initialState);\r\n\r\n\r\n    \r\n    // GET CONTACTS \r\n\r\n    const getProduct = async () => {\r\n        try {\r\n            const res = await axois.get(\"/api/product\")\r\n            dispatch({ type:GET_ALL_PRODUCT, payload: res.data })\r\n        } catch (err) {\r\n            dispatch({\r\n                type: PRODUCT_ERROR,\r\n                payload: err.response\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // // ADD CONTACTS\r\n    // const addContact = async contact => {\r\n    //     const config = { headers: { 'Content-Type': 'application/json' } }\r\n    //     try {\r\n    //         const res = await axois.post(\"/api/contacts\", contact, config)\r\n    //         dispatch({ type: ADD_CONTACT, payload: res.data })\r\n    //     } catch (err) {\r\n    //         dispatch({\r\n    //             type: CONTACTS_ERROR,\r\n    //             payload: err.response.msg\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n\r\n    // // UPDATE CONTACT \r\n    // const updateContact = async  contact => {\r\n    //     const config = { headers: { 'Content-Type': 'application/json' } }\r\n    //     try {\r\n    //         const res = await axois.put(`/api/contacts/${contact._id}`, contact, config)\r\n    //         dispatch({ type: UPDATE_CONTACT, payload: res.data })\r\n    //     } catch (err) {\r\n    //         dispatch({\r\n    //             type: CONTACTS_ERROR,\r\n    //             payload: err.response.msg\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n\r\n    // // DELETE_CONTACT\r\n    // const deleteContact = async id => {\r\n    //     try {\r\n    //         await axois.delete(`/api/contacts/${id}`)\r\n    //         dispatch({ type: DELETE_CONTACT, payload: id })\r\n    //     } catch (err) {\r\n    //         dispatch({\r\n    //             type: CONTACTS_ERROR,\r\n    //             payload: err.response.msg\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n    // // SET CURRENT CONTACT \r\n    // const setCurrent = contact => {\r\n    //     dispatch({ type: SET_CURRENT, payload: contact })\r\n    // }\r\n\r\n\r\n\r\n    // // CLEAR CURRENT CONTACT \r\n    // const clearCurrent = () => {\r\n    //     dispatch({ type: CLEAR_CURRENT })\r\n    // }\r\n\r\n    // // FILTER CONTACT \r\n    // const filterContact = text => {\r\n    //     dispatch({ type: FILTER_CONTACTS, payload: text })\r\n    // }\r\n\r\n\r\n    // // CLEAR FILTER \r\n    // const clearFilter = () => {\r\n    //     dispatch({ type: CLEAR_FILTER })\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <ProductContext.Provider\r\n            value={{\r\n                products: state.products,\r\n                getProduct\r\n            }}>\r\n            {props.children}\r\n        </ProductContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport default ProductState;"]},"metadata":{},"sourceType":"module"}