{"ast":null,"code":"import _regeneratorRuntime from\"/media/saroj/New Volume1/work/client/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/media/saroj/New Volume1/work/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useReducer}from'react';import axois from'axios';import ProductContext from'./productContext';import ProductReducer from'./productReducer';import{GET_ALL_PRODUCT,GET_PRODUCT_BY_ID,DELETE_PRODUCT,PRODUCT_ERROR,EDIT_PRODUCT}from'../type';var ProductState=function ProductState(props){var initialState={products:[],currentProduct:null,filterd:null,error:null};var _useReducer=useReducer(ProductReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// GET Products \nvar getProduct=function getProduct(){var res;return _regeneratorRuntime.async(function getProduct$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(axois.get(\"/api/product\"));case 3:res=_context.sent;dispatch({type:GET_ALL_PRODUCT,payload:res.data});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);dispatch({type:PRODUCT_ERROR,payload:_context.t0.response});case 10:case\"end\":return _context.stop();}}},null,null,[[0,7]]);};// get Products by id \nvar getProductById=function getProductById(id){var res;return _regeneratorRuntime.async(function getProductById$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return _regeneratorRuntime.awrap(axois.get(\"/api/product/\".concat(id)));case 3:res=_context2.sent;dispatch({type:GET_PRODUCT_BY_ID,payload:res.data});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);dispatch({type:PRODUCT_ERROR,payload:_context2.t0.response});case 10:case\"end\":return _context2.stop();}}},null,null,[[0,7]]);};// // ADD CONTACTS\n// const addContact = async contact => {\n//     const config = { headers: { 'Content-Type': 'application/json' } }\n//     try {\n//         const res = await axois.post(\"/api/contacts\", contact, config)\n//         dispatch({ type: ADD_CONTACT, payload: res.data })\n//     } catch (err) {\n//         dispatch({\n//             type: CONTACTS_ERROR,\n//             payload: err.response.msg\n//         })\n//     }\n// }\n// // UPDATE CONTACT \n// const updateContact = async  contact => {\n//     const config = { headers: { 'Content-Type': 'application/json' } }\n//     try {\n//         const res = await axois.put(`/api/contacts/${contact._id}`, contact, config)\n//         dispatch({ type: UPDATE_CONTACT, payload: res.data })\n//     } catch (err) {\n//         dispatch({\n//             type: CONTACTS_ERROR,\n//             payload: err.response.msg\n//         })\n//     }\n// }\n// // DELETE_CONTACT\n// const deleteContact = async id => {\n//     try {\n//         await axois.delete(`/api/contacts/${id}`)\n//         dispatch({ type: DELETE_CONTACT, payload: id })\n//     } catch (err) {\n//         dispatch({\n//             type: CONTACTS_ERROR,\n//             payload: err.response.msg\n//         })\n//     }\n// }\n// // SET CURRENT CONTACT \n// const setCurrent = contact => {\n//     dispatch({ type: SET_CURRENT, payload: contact })\n// }\n// // CLEAR CURRENT CONTACT \n// const clearCurrent = () => {\n//     dispatch({ type: CLEAR_CURRENT })\n// }\n// // FILTER CONTACT \n// const filterContact = text => {\n//     dispatch({ type: FILTER_CONTACTS, payload: text })\n// }\n// // CLEAR FILTER \n// const clearFilter = () => {\n//     dispatch({ type: CLEAR_FILTER })\n// }\nreturn React.createElement(ProductContext.Provider,{value:{products:state.products,getProduct:getProduct,getProductById:getProductById,currentProduct:state.currentProduct}},props.children);};export default ProductState;","map":{"version":3,"sources":["/media/saroj/New Volume1/work/client/src/context/product/productState.js"],"names":["React","useReducer","axois","ProductContext","ProductReducer","GET_ALL_PRODUCT","GET_PRODUCT_BY_ID","DELETE_PRODUCT","PRODUCT_ERROR","EDIT_PRODUCT","ProductState","props","initialState","products","currentProduct","filterd","error","state","dispatch","getProduct","get","res","type","payload","data","response","getProductById","id","children"],"mappings":"qOAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,OACIC,eADJ,CAEIC,iBAFJ,CAGIC,cAHJ,CAIIC,aAJJ,CAKIC,YALJ,KAMO,SANP,CAQA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC5B,GAAMC,CAAAA,YAAY,CAAG,CACjBC,QAAQ,CAAE,EADO,CAEjBC,cAAc,CAAG,IAFA,CAGjBC,OAAO,CAAE,IAHQ,CAIjBC,KAAK,CAAE,IAJU,CAArB,CAD4B,gBAQFf,UAAU,CAACG,cAAD,CAAiBQ,YAAjB,CARR,4CAQrBK,KARqB,iBAQdC,QARc,iBAY5B;AAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,gMAEOjB,KAAK,CAACkB,GAAN,CAAU,cAAV,CAFP,SAELC,GAFK,eAGXH,QAAQ,CAAC,CAAEI,IAAI,CAACjB,eAAP,CAAwBkB,OAAO,CAAEF,GAAG,CAACG,IAArC,CAAD,CAAR,CAHW,+EAKXN,QAAQ,CAAC,CACLI,IAAI,CAAEd,aADD,CAELe,OAAO,CAAE,YAAIE,QAFR,CAAD,CAAR,CALW,iEAAnB,CAcA;AACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAMC,EAAN,wMAEGzB,KAAK,CAACkB,GAAN,wBAA0BO,EAA1B,EAFH,SAETN,GAFS,gBAGfH,QAAQ,CAAC,CAAEI,IAAI,CAAEhB,iBAAR,CAA2BiB,OAAO,CAAEF,GAAG,CAACG,IAAxC,CAAD,CAAR,CAHe,mFAKfN,QAAQ,CAAC,CACLI,IAAI,CAAEd,aADD,CAELe,OAAO,CAAE,aAAIE,QAFR,CAAD,CAAR,CALe,kEAAvB,CAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA,MACI,qBAAC,cAAD,CAAgB,QAAhB,EACI,KAAK,CAAE,CACHZ,QAAQ,CAAEI,KAAK,CAACJ,QADb,CAEHM,UAAU,CAAVA,UAFG,CAGHO,cAAc,CAAdA,cAHG,CAIHZ,cAAc,CAAGG,KAAK,CAACH,cAJpB,CADX,EAOKH,KAAK,CAACiB,QAPX,CADJ,CAWH,CAnID,CAsIA,cAAelB,CAAAA,YAAf","sourcesContent":["import React, { useReducer } from 'react';\r\nimport axois from 'axios';\r\nimport ProductContext from './productContext';\r\nimport ProductReducer from './productReducer';\r\nimport {\r\n    GET_ALL_PRODUCT,\r\n    GET_PRODUCT_BY_ID,\r\n    DELETE_PRODUCT,\r\n    PRODUCT_ERROR,\r\n    EDIT_PRODUCT\r\n} from '../type';\r\n\r\nconst ProductState = (props) => {\r\n    const initialState = {\r\n        products: [],\r\n        currentProduct:  null,\r\n        filterd: null,\r\n        error: null\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(ProductReducer, initialState);\r\n\r\n\r\n\r\n    // GET Products \r\n\r\n    const getProduct = async () => {\r\n        try {\r\n            const res = await axois.get(\"/api/product\")\r\n            dispatch({ type:GET_ALL_PRODUCT, payload: res.data })\r\n        } catch (err) {\r\n            dispatch({\r\n                type: PRODUCT_ERROR,\r\n                payload: err.response\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // get Products by id \r\n    const getProductById = async id => {\r\n        try {\r\n            const res = await axois.get(`/api/product/${id}`)\r\n            dispatch({ type: GET_PRODUCT_BY_ID, payload: res.data})\r\n        } catch (err) {\r\n            dispatch({\r\n                type: PRODUCT_ERROR,\r\n                payload: err.response\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // // ADD CONTACTS\r\n    // const addContact = async contact => {\r\n    //     const config = { headers: { 'Content-Type': 'application/json' } }\r\n    //     try {\r\n    //         const res = await axois.post(\"/api/contacts\", contact, config)\r\n    //         dispatch({ type: ADD_CONTACT, payload: res.data })\r\n    //     } catch (err) {\r\n    //         dispatch({\r\n    //             type: CONTACTS_ERROR,\r\n    //             payload: err.response.msg\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n\r\n    // // UPDATE CONTACT \r\n    // const updateContact = async  contact => {\r\n    //     const config = { headers: { 'Content-Type': 'application/json' } }\r\n    //     try {\r\n    //         const res = await axois.put(`/api/contacts/${contact._id}`, contact, config)\r\n    //         dispatch({ type: UPDATE_CONTACT, payload: res.data })\r\n    //     } catch (err) {\r\n    //         dispatch({\r\n    //             type: CONTACTS_ERROR,\r\n    //             payload: err.response.msg\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n\r\n    // // DELETE_CONTACT\r\n    // const deleteContact = async id => {\r\n    //     try {\r\n    //         await axois.delete(`/api/contacts/${id}`)\r\n    //         dispatch({ type: DELETE_CONTACT, payload: id })\r\n    //     } catch (err) {\r\n    //         dispatch({\r\n    //             type: CONTACTS_ERROR,\r\n    //             payload: err.response.msg\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n    // // SET CURRENT CONTACT \r\n    // const setCurrent = contact => {\r\n    //     dispatch({ type: SET_CURRENT, payload: contact })\r\n    // }\r\n\r\n\r\n\r\n    // // CLEAR CURRENT CONTACT \r\n    // const clearCurrent = () => {\r\n    //     dispatch({ type: CLEAR_CURRENT })\r\n    // }\r\n\r\n    // // FILTER CONTACT \r\n    // const filterContact = text => {\r\n    //     dispatch({ type: FILTER_CONTACTS, payload: text })\r\n    // }\r\n\r\n\r\n    // // CLEAR FILTER \r\n    // const clearFilter = () => {\r\n    //     dispatch({ type: CLEAR_FILTER })\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <ProductContext.Provider\r\n            value={{\r\n                products: state.products,\r\n                getProduct,\r\n                getProductById,\r\n                currentProduct : state.currentProduct\r\n            }}>\r\n            {props.children}\r\n        </ProductContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport default ProductState;"]},"metadata":{},"sourceType":"module"}