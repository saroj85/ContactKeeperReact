{"ast":null,"code":"import _slicedToArray from \"D:\\\\work\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\work\\\\client\\\\src\\\\context\\\\auth\\\\authState.js\";\nimport React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\nimport axois from 'axios';\nimport SetAuthToken from '../../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS, VERIFY_OTP, SEND_OTP } from '../type';\n\nconst AuthState = props => {\n  const initialState = {\n    token: null,\n    isAuthenticated: null,\n    loading: true,\n    error: null,\n    user: null\n  };\n\n  const _useReducer = useReducer(AuthReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // load user \n\n\n  const loadUser = async () => {\n    if (localStorage.token) SetAuthToken(localStorage.token);\n\n    try {\n      const res = await axois.get('/api/auth');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n\n    ;\n  }; // Register User \n\n\n  const registerUser = async FormData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axois.post('/api/users', FormData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      sendOtpReq(FormData.email); // loadUser();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response\n      });\n    }\n  }; // send otp \n\n\n  const sendOtpReq = async email => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axois.post('/api/users/otp', {\n        \"email\": email\n      }, config);\n      dispatch({\n        type: SEND_OTP\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  }; // send otp for verify \n\n\n  const sendOtpVerify = async otp => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axois.post('/api/users/otp', {\n        \"otpNum\": otp\n      }, config);\n      dispatch({\n        type: VERIFY_OTP\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  }; // Login user \n\n\n  const login = async FormData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axois.post('/api/auth', FormData, config);\n      dispatch({\n        type: LOGIN_SUCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n\n    ;\n  }; // logout request \n\n\n  const logout = () => {\n    dispatch({\n      type: LOGOUT\n    });\n  }; // clear error \n\n\n  const clearError = () => {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n  };\n\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      error: state.error,\n      user: state.user,\n      registerUser,\n      loadUser,\n      login,\n      logout,\n      clearError,\n      sendOtpVerify\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["D:/work/client/src/context/auth/authState.js"],"names":["React","useReducer","AuthContext","AuthReducer","axois","SetAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","VERIFY_OTP","SEND_OTP","AuthState","props","initialState","token","isAuthenticated","loading","error","user","state","dispatch","loadUser","localStorage","res","get","type","payload","data","err","registerUser","FormData","config","headers","post","sendOtpReq","email","response","sendOtpVerify","otp","login","msg","logout","clearError","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\nimport AuthContext from './authContext';\r\nimport AuthReducer from './authReducer';\r\nimport axois from 'axios';\r\nimport SetAuthToken from '../../utils/setAuthToken';\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    CLEAR_ERRORS,\r\n    VERIFY_OTP,\r\n    SEND_OTP\r\n} from '../type';\r\n\r\n\r\nconst AuthState = (props) => {\r\n    const initialState = {\r\n        token: null ,\r\n        isAuthenticated: null,\r\n        loading: true,\r\n        error: null,\r\n        user: null\r\n    };\r\n    const [state, dispatch] = useReducer(AuthReducer, initialState);\r\n\r\n    // load user \r\n    const loadUser = async () => {\r\n        if (localStorage.token)  SetAuthToken(localStorage.token)\r\n        try {\r\n            const res = await axois.get('/api/auth');\r\n            dispatch({type: USER_LOADED,payload: res.data})\r\n        } catch (err) {\r\n            dispatch({type: AUTH_ERROR})\r\n        };\r\n    };\r\n\r\n\r\n    // Register User \r\n    const registerUser = async FormData => {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        try {\r\n            const res = await axois.post('/api/users', FormData, config);\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data\r\n            })\r\n            sendOtpReq(FormData.email)\r\n            // loadUser();\r\n        } catch (err) {\r\n            dispatch({\r\n                type: REGISTER_FAIL,\r\n                payload: err.response\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // send otp \r\n    const sendOtpReq = async (email) => {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n\r\n        try {\r\n            const res = await axois.post('/api/users/otp', {\"email\": email}, config);\r\n            dispatch({\r\n                type: SEND_OTP,\r\n            })\r\n\r\n        }catch(err){\r\n            dispatch({\r\n                type: REGISTER_FAIL,\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    // send otp for verify \r\n    \r\n    const sendOtpVerify = async (otp) => {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        try {\r\n            const res = await axois.post('/api/users/otp', {\"otpNum\": otp}, config);\r\n            dispatch({\r\n                type: VERIFY_OTP,\r\n            })\r\n\r\n            \r\n        }catch(err){\r\n            dispatch({\r\n                type: REGISTER_FAIL,\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n\r\n    // Login user \r\n    const login = async FormData => {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        try {\r\n            const res = await axois.post('/api/auth', FormData, config);\r\n            dispatch({\r\n                type: LOGIN_SUCESS,\r\n                payload: res.data\r\n            })\r\n            loadUser();\r\n        } catch (err) {\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n                payload: err.response.data.msg\r\n            });\r\n        };\r\n    };\r\n\r\n    // logout request \r\n    const logout = () => {\r\n        dispatch({\r\n            type: LOGOUT\r\n        });\r\n    };\r\n\r\n    // clear error \r\n    const clearError = () => {\r\n        dispatch({\r\n            type: CLEAR_ERRORS,\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                token: state.token,\r\n                isAuthenticated: state.isAuthenticated,\r\n                loading: state.loading,\r\n                error: state.error,\r\n                user: state.user,\r\n                registerUser,\r\n                loadUser,\r\n                login,\r\n                logout,\r\n                clearError,\r\n                sendOtpVerify\r\n            }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport default AuthState;"]},"metadata":{},"sourceType":"module"}